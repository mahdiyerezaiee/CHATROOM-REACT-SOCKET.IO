{"ast":null,"code":"var _jsxFileName = \"/home/mehrshad/Desktop/chat-app/src/component/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: \"\",\n    recievername: \"\",\n    connected: false,\n    message: \"\"\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n\n  const handlerUseName = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  const registerUser = () => {\n    let Sock = new SockJS('http://8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"name\",\n        value: userData.username,\n        onChange: handlerUseName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: registerUser,\n        children: \"connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"gKVppKQdRYgAq6OSPKV8EQl+zgU=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["useEffect","useState","SockJS","over","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","userData","setUserData","username","recievername","connected","message","console","log","handlerUseName","event","value","target","registerUser","Sock","connect","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","push","list","err","handleMessage","sendValue","sendPrivateValue","receiverName"],"sources":["/home/mehrshad/Desktop/chat-app/src/component/ChatRoom.js"],"sourcesContent":["import {useEffect, useState} from \"react\";\nimport SockJS from 'sockjs-client'\nimport {over} from 'stompjs'\nvar stompClient=null;\nconst ChatRoom = () => {\n    const [privateChats, setPrivateChats] = useState(new Map());\n    const [publicChats, setPublicChats] = useState([]);\n    const [tab,setTab] =useState(\"CHATROOM\");\n    const [userData , setUserData]=useState({\n        username:\"\",\n        recievername:\"\",\n        connected:false,\n        message:\"\",\n\n\n    });\n    useEffect(() => {\n        console.log(userData);\n    }, [userData]);\n\n    const handlerUseName=(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"username\":value});\n    }\n    const registerUser=()=>{\nlet Sock=new  SockJS('http://8080/ws');\nstompClient=over(Sock);\nstompClient.connect({},onConnected,onError)\n    }\n    const onConnected = () => {\n        setUserData({...userData,\"connected\": true});\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\n        stompClient.subscribe('/user/'+userData.username+'/private', onPrivateMessage);\n        userJoin();\n    }\n\n    const userJoin=()=>{\n        var chatMessage = {\n            senderName: userData.username,\n            status:\"JOIN\"\n        };\n        stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n    }\n\n    const onMessageReceived = (payload)=>{\n        var payloadData = JSON.parse(payload.body);\n        switch(payloadData.status){\n            case \"JOIN\":\n                if(!privateChats.get(payloadData.senderName)){\n                    privateChats.set(payloadData.senderName,[]);\n                    setPrivateChats(new Map(privateChats));\n                }\n                break;\n            case \"MESSAGE\":\n                publicChats.push(payloadData);\n                setPublicChats([...publicChats]);\n                break;\n        }\n    }\n\n    const onPrivateMessage = (payload)=>{\n        console.log(payload);\n        var payloadData = JSON.parse(payload.body);\n        if(privateChats.get(payloadData.senderName)){\n            privateChats.get(payloadData.senderName).push(payloadData);\n            setPrivateChats(new Map(privateChats));\n        }else{\n            let list =[];\n            list.push(payloadData);\n            privateChats.set(payloadData.senderName,list);\n            setPrivateChats(new Map(privateChats));\n        }\n    }\n    const onError = (err) => {\n        console.log(err);\n\n    }\n    const handleMessage =(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"message\": value});\n    }\n    const sendValue=()=>{\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                message: userData.message,\n                status:\"MESSAGE\"\n            };\n            console.log(chatMessage);\n            stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n            setUserData({...userData,\"message\": \"\"});\n        }\n    }\n\n    const sendPrivateValue=()=>{\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                receiverName:tab,\n                message: userData.message,\n                status:\"MESSAGE\"\n            };\n\n            if(userData.username !== tab){\n                privateChats.get(tab).push(chatMessage);\n                setPrivateChats(new Map(privateChats));\n            }\n            stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n            setUserData({...userData,\"message\": \"\"});\n        }\n    }\n\n    return(\n    <div className=\"container\">\n        {userData.connected?\n            <div></div>\n            :\n            <div className=\"register\">\n                <input\n                    id='user-name'\n                    placeholder='name'\n                    value={userData.username}\n                    onChange={handlerUseName}\n                />\n                <button type=\"button\" onClick={registerUser}>\n                    connect\n                </button>\n            </div>\n        }\n    </div>\n)\n}\nexport default ChatRoom"],"mappings":"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"},"metadata":{},"sourceType":"module"}